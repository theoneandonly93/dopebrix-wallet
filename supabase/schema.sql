-- DopeBrix Supabase schema
-- Run this SQL in your Supabase project SQL editor.

create table if not exists public.profiles (
  id uuid primary key default gen_random_uuid(),
  auth_uid uuid unique, -- link to auth.users.id (optional)
  created_at timestamptz default now()
);

create table if not exists public.wallets (
  id uuid primary key default gen_random_uuid(),
  profile_id uuid references public.profiles(id) on delete cascade,
  name text not null,
  address text not null unique,
  created_at timestamptz default now()
);

create table if not exists public.tokens (
  id uuid primary key default gen_random_uuid(),
  symbol text not null,
  name text not null,
  supply numeric not null,
  decimals int not null,
  creator_wallet uuid references public.wallets(id) on delete set null,
  chain text default 'fairbrix',
  created_at timestamptz default now()
);

create table if not exists public.pools (
  id uuid primary key default gen_random_uuid(),
  token_id uuid references public.tokens(id) on delete cascade,
  reserve_fbx numeric not null,
  reserve_token numeric not null,
  fee_bps int default 30,
  created_at timestamptz default now()
);

create table if not exists public.trades (
  id bigint generated by default as identity primary key,
  token_id uuid references public.tokens(id) on delete cascade,
  wallet_id uuid references public.wallets(id) on delete set null,
  side text check (side in ('buy','sell')),
  fbx_amount numeric not null,
  token_amount numeric not null,
  price numeric not null,
  txid text,
  created_at timestamptz default now()
);

create table if not exists public.nfts (
  id uuid primary key default gen_random_uuid(),
  name text not null,
  content_hex text not null,
  owner_wallet uuid references public.wallets(id) on delete set null,
  chain text default 'fairbrix',
  created_at timestamptz default now()
);

create table if not exists public.nft_listings (
  id uuid primary key default gen_random_uuid(),
  nft_id uuid references public.nfts(id) on delete cascade,
  seller_wallet uuid references public.wallets(id) on delete cascade,
  price_fbx numeric not null,
  status text default 'listed' check (status in ('listed','sold','cancelled')),
  created_at timestamptz default now()
);

-- Views
create or replace view public.token_volume_24h as
select t.id as token_id,
       coalesce(sum(case when tr.created_at > now() - interval '24 hours' then tr.fbx_amount else 0 end),0) as volume_24h
from public.tokens t
left join public.trades tr on tr.token_id = t.id
group by t.id;

-- RLS
alter table public.profiles enable row level security;
alter table public.wallets enable row level security;
alter table public.tokens enable row level security;
alter table public.pools enable row level security;
alter table public.trades enable row level security;
alter table public.nfts enable row level security;
alter table public.nft_listings enable row level security;

-- Public read for discovery
create policy "public read profiles" on public.profiles for select using (true);
create policy "public read wallets" on public.wallets for select using (true);
create policy "public read tokens" on public.tokens for select using (true);
create policy "public read pools" on public.pools for select using (true);
create policy "public read trades" on public.trades for select using (true);
create policy "public read nfts" on public.nfts for select using (true);
create policy "public read listings" on public.nft_listings for select using (true);

-- Simple insert policy (optional, restrict in production)
create policy "anonymous insert" on public.tokens for insert with check (true);
create policy "anonymous insert trades" on public.trades for insert with check (true);
create policy "anonymous insert wallets" on public.wallets for insert with check (true);
create policy "anonymous insert nfts" on public.nfts for insert with check (true);
create policy "anonymous insert listings" on public.nft_listings for insert with check (true);

